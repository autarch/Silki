#!/usr/bin/perl

use strict;
use warnings;

use lib './lib';

use Silki::Config;

system( 'psql', 'template1', '-f', './schema/Silki.sql' )
    and die 'Cannot create Silki database with psql';


require Silki::Schema::Locale;

Silki::Schema::Locale->CreateDefaultLocales();

require Silki::Schema::Country;

Silki::Schema::Country->CreateDefaultCountries();

require Silki::Schema::TimeZone;

Silki::Schema::TimeZone->CreateDefaultZones();

require Silki::Schema::Domain;

Silki::Schema::Domain->EnsureRequiredDomainsExist();

require Silki::Schema::User;

Silki::Schema::User->EnsureRequiredUsersExist();

require Silki::Schema::Account;
require Silki::Schema::Role;

print "\n";

my $account = make_account();
my $admin = make_admin_user($account);
my $regular = make_regular_user($account);
make_first_wiki( $admin, $regular, $account );
make_second_wiki( $admin, $regular, $account );
make_third_wiki( $admin, $regular, $account );

sub make_account
{
    return Silki::Schema::Account->insert( name => 'Default Account' );
}

sub make_admin_user
{
    my $account = shift;

    my $email = 'admin@' . Silki::Schema::Domain->DefaultDomain()->email_hostname();
    my $pw = 'changeme';

    my $admin =
        Silki::Schema::User->insert( display_name       => 'Angela D. Min',
                                     email_address      => $email,
                                     password           => $pw,
                                     is_admin           => 1,
                                     created_by_user_id => Silki::Schema::User->SystemUser()->user_id(),
                                   );

    $account->add_admin($admin);

    print <<"EOF";
Created the admin user:

  email:    $email
  password: $pw

EOF

    return $admin;
}

sub make_regular_user
{
    my $account = shift;

    my $email = 'joe@' . Silki::Schema::Domain->DefaultDomain()->email_hostname();
    my $pw = 'changeme';

    my $regular =
        Silki::Schema::User->insert( display_name       => 'Joe Schmoe',
                                     email_address      => $email,
                                     password           => $pw,
                                     is_admin           => 1,
                                     created_by_user_id => Silki::Schema::User->SystemUser()->user_id(),
                                   );

    print <<"EOF";
Created a regular user:

  email:    $email
  password: $pw

EOF

    return $regular;
}

sub make_first_wiki
{
    my $admin   = shift;
    my $regular = shift;
    my $account = shift;

    require Silki::Schema::Wiki;

    my $wiki =
        Silki::Schema::Wiki->insert( title      => 'The First Wiki',
                                     short_name => 'first-wiki',
                                     domain_id  => Silki::Schema::Domain->DefaultDomain()->domain_id(),
                                     user_id    => Silki::Schema::User->SystemUser()->user_id(),
                                     account_id => $account->account_id(),
                                   );

    $wiki->set_permissions('public');

    $wiki->add_user( user => $admin, role => Silki::Schema::Role->Admin() );
    $wiki->add_user( user => $regular, role => Silki::Schema::Role->Member() );

    my $uri = $wiki->uri( with_host => 1 );

    print <<"EOF";
Created the first wiki:

  URI: $uri

EOF
}

sub make_second_wiki
{
    my $admin   = shift;
    my $regular = shift;
    my $account = shift;

    require Silki::Schema::Wiki;

    my $wiki =
        Silki::Schema::Wiki->insert( title      => 'The Second Wiki',
                                     short_name => 'second-wiki',
                                     domain_id  => Silki::Schema::Domain->DefaultDomain()->domain_id(),
                                     user_id    => Silki::Schema::User->SystemUser()->user_id(),
                                     account_id => $account->account_id(),
                                   );

    $wiki->set_permissions('private');

    $wiki->add_user( user => $admin, role => Silki::Schema::Role->Admin() );
    $wiki->add_user( user => $regular, role => Silki::Schema::Role->Member() );

    my $uri = $wiki->uri( with_host => 1 );

    print <<"EOF";
Created the second wiki:

  URI: $uri

EOF
}

sub make_third_wiki
{
    my $admin   = shift;
    my $regular = shift;
    my $account = shift;

    require Silki::Schema::Wiki;

    my $wiki =
        Silki::Schema::Wiki->insert( title      => 'The Third Wiki',
                                     short_name => 'third-wiki',
                                     domain_id  => Silki::Schema::Domain->DefaultDomain()->domain_id(),
                                     user_id    => Silki::Schema::User->SystemUser()->user_id(),
                                     account_id => $account->account_id(),
                                   );

    $wiki->set_permissions('private');

    $wiki->add_user( user => $regular, role => Silki::Schema::Role->Member() );

    my $uri = $wiki->uri( with_host => 1 );

    print <<"EOF";
Created the third wiki:

  URI: $uri

EOF
}

